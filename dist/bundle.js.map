{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://game/./src/scripts/templateEngine.ts","webpack://game/./src/scripts/render-cards.ts","webpack://game/./src/scripts/render-time-game.ts","webpack://game/./src/scripts/render-chosen-cards.ts","webpack://game/./src/scripts/render-game-screen.ts","webpack://game/./src/scripts/index.ts"],"sourcesContent":["export default function templateEngine(block: unknown) {\n    if (block === undefined || block === null || block === false) {\n        return document.createTextNode('');\n    }\n\n    if (\n        typeof block === 'string' ||\n        typeof block === 'number' ||\n        block === true\n    ) {\n        return document.createTextNode(String(block));\n    }\n\n    if (Array.isArray(block)) {\n        const fragment = document.createDocumentFragment();\n\n        block.forEach((element) => {\n            fragment.appendChild(templateEngine(element));\n        });\n\n        return fragment;\n    }\n\n    type blockObject = Record<'tag' | 'content' | 'cls' | 'attrs', string>;\n    const result = document.createElement((block as blockObject).tag);\n\n    result.appendChild(templateEngine((block as blockObject).content));\n\n    if ((block as blockObject).cls) {\n        const classes: string[] = ([] as string[]).concat((block as blockObject).cls);\n        classes.forEach((cls) => {\n            result.classList.add(cls);\n        });\n    }\n\n    if ((block as blockObject).attrs) {\n        const keys = Object.keys((block as blockObject).attrs);\n\n        keys.forEach((key) => {\n            result.setAttribute(\n                key,\n                (block as blockObject).attrs[key as unknown as number]\n            );\n        });\n    }\n\n    return result;\n}","import templateEngine from './templateEngine';\n\nexport type crCard = ReturnType<typeof creatingCard>;\n\nfunction creatingCard(card: Record<'suit' | 'value', string | number>) {\n    return {\n        tag: 'div',\n        cls: 'card',\n        content: [\n            {\n                tag: 'img',\n                cls: ['card-shirt'],\n                attrs: {\n                    src: './static/card_face_down.png',\n                },\n            },\n            {\n                tag: 'div',\n                cls: ['card-face-hidden'],\n                content: [\n                    {\n                        tag: 'div',\n                        cls: 'card-face-value',\n                        content: `${card.value}`,\n                    },\n                    {\n                        tag: 'div',\n                        cls: 'card-face-suit',\n                        content: `${card.suit}`,\n                    },\n                    {\n                        tag: 'p',\n                        cls: 'card-face-centered-suit',\n                        content: `${card.suit}`,\n                    },\n                    {\n                        tag: 'div',\n                        cls: ['card-face-value', 'upside-down-value'],\n                        content: `${card.value}`,\n                    },\n                    {\n                        tag: 'div',\n                        cls: ['card-face-suit', 'upside-down-suit'],\n                        content: `${card.suit}`,\n                    },\n                ],\n            },\n        ],\n    };\n}\n\nexport default function renderCards(level: string | null) {\n    const suits = ['\\u2660', '\\u2663', '\\u2666', '\\u2665'];\n\n    const values: (string | number)[] = [6, 7, 8, 9, 10, 'Q', 'K', 'J', 'A'];\n\n    let blockWithCards: HTMLElement | null = document.querySelector(\n        '.block-with-cards-main'\n    );\n\n    if (blockWithCards !== null) {\n        if (blockWithCards.classList.contains('block-with-cards')) {\n            blockWithCards = document.querySelector('.block-with-cards');\n        }\n    }\n    if (blockWithCards !== null) {\n        if (blockWithCards.classList.contains('block-with-cards-hidden')) {\n            blockWithCards = document.querySelector('.block-with-cards-hidden');\n        }\n        if (blockWithCards !== null) {\n            blockWithCards.innerHTML = '';\n            blockWithCards.classList.remove('block-with-cards-hidden');\n            blockWithCards.classList.add('block-with-cards');\n        }\n    }\n\n    function getRandomSuit(arr: string[]): string[] {\n        const newSuits = [];\n\n        for (let i = 0; i < 3; i++) {\n            newSuits.push(arr[Math.floor(Math.random() * arr.length)]);\n        }\n        const set = new Set(newSuits);\n        const finalArr3 = [...set];\n        if (finalArr3.length === 3) {\n            finalArr3.pop();\n            return finalArr3;\n        }\n        if (finalArr3.length < 2) {\n           return  getRandomSuit(arr);\n        } else {\n            return finalArr3;\n        }\n    }\n\n    function renderLevel() {\n        const newValues: (string | number)[] = [];\n        function getRandomValue(arr: (string | number)[]): (string | number)[] {\n            if (level === '1') {\n                for (let i = 0; i < 4; i++) {\n                    newValues.push(arr[Math.floor(Math.random() * arr.length)]);\n                }\n                const set = new Set(newValues);\n                const finalArr2 = [...set];\n                if (finalArr2.length === 4) {\n                    finalArr2.pop();\n                    return finalArr2;\n                }\n                if (finalArr2.length < 3) {\n                    return getRandomValue(arr);\n                } else {\n                    return finalArr2;\n                }\n            }\n            if (level === '2') {\n                while (newValues.length < 7) {\n                    newValues.push(arr[Math.floor(Math.random() * arr.length)]);\n                }\n                const set = new Set(newValues);\n                let finalArr2 = [...set];\n                if (finalArr2.length === 6) {\n                    return finalArr2;\n                }\n                while (finalArr2.length < 6) {\n                    finalArr2.push(arr[Math.floor(Math.random() * arr.length)]);\n                    const set2 = new Set(finalArr2);\n                    finalArr2 = [...set2];\n                }\n                return finalArr2;\n            } else {\n                return arr;\n            }\n        }\n\n        let listOfCards: Record<'suit' | 'value', string | number>[] = [];\n\n        function renderRelevantNumberCards(\n            arr1: string[],\n            arr2: (string | number)[],\n            object: Record<'suit' | 'value', string | number>[]\n        ) {\n            for (const elem of arr1) {\n                for (const el of arr2) {\n                    object.push({\n                        suit: elem,\n                        value: el,\n                    });\n                }\n            }\n            return object;\n        }\n\n        renderRelevantNumberCards(\n            getRandomSuit(suits),\n            getRandomValue(values),\n            listOfCards\n        );\n        listOfCards = listOfCards.sort(() => Math.random() - 0.5);\n        if (blockWithCards !== null) {\n            blockWithCards.appendChild(\n                templateEngine(listOfCards.map((el) => creatingCard(el)))\n            );\n        }\n    }\n\n    renderLevel();\n\n    function changeColor(node: Element | null) {\n        while (node) {\n            if (\n                node.textContent === '\\u2666' ||\n                node.textContent === '\\u2665'\n            ) {\n                node.setAttribute('style', 'color: red');\n            }\n            const child: Element | null = node.firstElementChild;\n            changeColor(child);\n\n            node = node.nextElementSibling;\n        }\n    }\n\n    if (blockWithCards !== null) {\n        changeColor(blockWithCards);\n    }\n}\n","export const minutes: HTMLElement | null =\n    document.querySelector('.timer-minutes');\nexport const seconds: HTMLElement | null =\n    document.querySelector('.timer-seconds');\nexport let timer: ReturnType<typeof setInterval>;\n\nexport default function renderTimeGame() {\n    if (!(minutes instanceof HTMLElement)) {\n        return;\n    }\n    let numberMinutesFormat: number | null;\n    if (minutes !== null) {\n        numberMinutesFormat = Number(minutes.textContent);\n    }\n    let count = 0;\n\n    function counting() {\n        count++;\n\n        if (seconds !== null) {\n            seconds.textContent = String(count);\n        }\n\n        if (count > 59) {\n            if (numberMinutesFormat !== null) {\n                numberMinutesFormat++;\n            }\n\n            if (minutes !== null) {\n                minutes.textContent = String(numberMinutesFormat);\n            }\n            if (seconds !== null) {\n                seconds.textContent = String(0);\n                count = 0;\n            }\n        }\n    }\n\n    timer = setInterval(counting, 1000);\n}\n\n","import { blockWithTimer } from './render-game-screen';\nimport { timer } from './render-time-game';\n\nimport { minutes, seconds } from './render-time-game';\nimport { buttonStartAgain } from './render-game-screen';\n\nimport { backToStart } from './render-game-screen';\n\nexport let blockFinalScreen: HTMLElement | null;\n\nexport default function renderChosenCards() {\n    const blockWithCards = document.querySelector('.block-with-cards');\n    const arrayClickedCards: string[] = [];\n    if (blockWithCards !== null) {\n        blockWithCards.addEventListener('click', function showCard(event) {\n            const target: Element | null = event.target as Element;\n            if (!(target instanceof HTMLElement)) return;\n            if (target.classList.contains('card-shirt')) {\n                const nextSibling: HTMLElement | null =\n                    target.nextElementSibling as HTMLElement;\n                const cardFace: Element | null =\n                    nextSibling.closest('.card-face-hidden');\n\n                target.classList.remove('card-shirt');\n                target.classList.add('card-shirt-hidden');\n                if (cardFace !== null) {\n                    cardFace.classList.remove('card-face-hidden');\n                    cardFace.classList.add('card-face');\n                    cardFace.classList.add('clicked');\n                    const firstChild: HTMLElement | null =\n                        cardFace.firstElementChild as HTMLElement;\n                    let value: string | null = '';\n                    value = firstChild.textContent;\n                    if (value !== null) {\n                        arrayClickedCards.push(value);\n                    }\n                }\n\n                if (target.classList.contains('card-face')) {\n                    const cardFace: HTMLElement | null =\n                        document.querySelector('.card-face');\n                    if (cardFace !== null) {\n                        cardFace.removeEventListener('click', showCard);\n                    }\n                }\n            }\n\n            let contains = true;\n            const allCards = document.querySelectorAll('.card');\n            function testClass() {\n                let elem: Element | null;\n                for (elem of allCards) {\n                    if (elem !== null) {\n                        const child: Element | null = elem.lastElementChild;\n                        if (child !== null) {\n                            if (!child.classList.contains('clicked')) {\n                                contains = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n                return contains;\n            }\n\n            const imageWin = './static/icon_celebration.png';\n            const imageLose = './static/icon_dead.png';\n\n            const inscriptionWin = 'Вы выиграли!';\n            const inscriptionLose = 'Вы проиграли!';\n\n            function renderFinalScreen(icon: string, inscription: string) {\n                if (blockWithCards !== null) {\n                    blockWithCards.removeEventListener('click', showCard);\n                }\n                if (buttonStartAgain !== null) {\n                    buttonStartAgain.setAttribute('disabled', 'true');\n                }\n\n                blockFinalScreen = document.querySelector(\n                    '.block-final-screen'\n                );\n                if (blockFinalScreen !== null) {\n                    blockFinalScreen.classList.remove(\n                        'block-final-screen-hidden'\n                    );\n                    const child: HTMLElement | null =\n                        blockFinalScreen.firstElementChild as HTMLElement;\n                    child.setAttribute('src', `${icon}`);\n                }\n\n                const finalScreenHEading = document.querySelector(\n                    '.block-final-screen__heading'\n                );\n                if (finalScreenHEading !== null) {\n                    finalScreenHEading.textContent = inscription;\n                }\n                if (blockWithTimer !== null) {\n                    blockWithTimer.style.opacity = '0.7';\n                }\n                if (blockWithCards !== null) {\n                    blockWithCards.setAttribute('opacity', '0.7');\n                }\n\n                clearInterval(timer);\n\n                const wastedTime = document.querySelector(\n                    '.block-final-screen__time-content'\n                );\n                if (\n                    wastedTime !== null &&\n                    minutes !== null &&\n                    seconds !== null\n                ) {\n                    wastedTime.textContent = `${minutes.textContent}.${seconds.textContent}`;\n                }\n\n                const buttonStartNewGame: HTMLElement | null =\n                    document.querySelector('.block-final-screen_button');\n                if (buttonStartNewGame !== null) {\n                    buttonStartNewGame.addEventListener('click', () =>\n                        backToStart()\n                    );\n                }\n            }\n\n            let i = 0;\n            function renderResult2(block: string[]) {\n                if (block.length < 2 || !block || !block[i + 1]) {\n                    return;\n                } else {\n                    if (block[i] === block[i + 1]) {\n                        testClass();\n                        if (contains) {\n                            renderFinalScreen(imageWin, inscriptionWin);\n                        } else {\n                            i += 2;\n                            renderResult2(block);\n                        }\n                    } else {\n                        renderFinalScreen(imageLose, inscriptionLose);\n                    }\n                }\n            }\n            renderResult2(arrayClickedCards);\n        });\n    }\n}\n","import renderCards from './render-cards';\nimport renderTimeGame from './render-time-game';\nimport renderChosenCards from './render-chosen-cards';\nimport { minutes, seconds } from './render-time-game';\nimport { timer } from './render-time-game';\n\nexport let blockWithTimer: HTMLElement | null;\nexport let buttonStartAgain: HTMLElement | null;\n\nexport let backToStart: backToStart;\n\ntype backToStart = () => void;\n\nconst blockChooseDifficulty: HTMLElement | null = document.querySelector(\n    '.block-choose-difficulty'\n);\n\nblockWithTimer = document.querySelector('.game-timer-button-hidden');\nconst blockWithCards = document.querySelector('.block-with-cards');\n\nbuttonStartAgain = document.querySelector('.button-start-again');\n\nexport default function renderGameScreen() {\n    if (blockChooseDifficulty !== null) {\n        blockChooseDifficulty.classList.add('block-choose-difficulty-hidden');\n    }\n\n    renderCards(localStorage.getItem('level'));\n\n    const cardShirts = document.querySelectorAll('.card-shirt');\n    const cardFaces = document.querySelectorAll('.card-face-hidden');\n\n    if (buttonStartAgain !== null) {\n        buttonStartAgain.setAttribute('disabled', 'disabled');\n    }\n\n    setTimeout(() => {\n        for (const elem of cardShirts) {\n            elem.classList.remove('card-shirt');\n            elem.classList.add('card-shirt-hidden');\n        }\n        for (const elem of cardFaces) {\n            elem.classList.remove('card-face-hidden');\n            elem.classList.add('card-face');\n        }\n    }, 1000);\n\n    setTimeout(() => {\n        for (const elem of cardShirts) {\n            elem.classList.remove('card-shirt-hidden');\n            elem.classList.add('card-shirt');\n        }\n        for (const elem of cardFaces) {\n            elem.classList.remove('card-face');\n            elem.classList.add('card-face-hidden');\n        }\n        if (buttonStartAgain !== null) {\n            buttonStartAgain.removeAttribute('disabled');\n        }\n\n        renderTimeGame();\n    }, 5000);\n\n    if (blockWithTimer !== null) {\n        blockWithTimer.classList.remove('game-timer-button-hidden');\n        blockWithTimer.classList.add('game-timer-button');\n    }\n\n    renderChosenCards();\n}\n\nconst startNewGame = () => {\n    if (buttonStartAgain !== null) {\n        buttonStartAgain.addEventListener(\n            'click',\n            (backToStart = () => {\n                if (blockChooseDifficulty !== null) {\n                    blockChooseDifficulty.classList.remove(\n                        'block-choose-difficulty-hidden'\n                    );\n                }\n                if (blockWithTimer !== null) {\n                    blockWithTimer.classList.add('game-timer-button-hidden');\n                    blockWithTimer.classList.remove('game-timer-button');\n                }\n\n                if (blockWithCards !== null) {\n                    blockWithCards.classList.remove('block-with-cards');\n                    blockWithCards.classList.add('block-with-cards-hidden');\n                }\n\n                const blockFinalScreen = document.querySelector(\n                    '.block-final-screen'\n                );\n                if (blockFinalScreen !== null) {\n                    if (\n                        !blockFinalScreen.classList.contains(\n                            'block-final-screen-hidden'\n                        )\n                    ) {\n                        blockFinalScreen.classList.add(\n                            'block-final-screen-hidden'\n                        );\n                    }\n                }\n                if (blockWithTimer !== null) {\n                    blockWithTimer.style.opacity = 'initial';\n                }\n                if (blockWithCards !== null) {\n                    blockWithCards.setAttribute('opacity', 'initial');\n                }\n\n                if (minutes !== null) {\n                    minutes.textContent = '00';\n                }\n                if (seconds !== null) {\n                    seconds.textContent = '00';\n                }\n\n                clearInterval(timer);\n            })\n        );\n    }\n};\nstartNewGame();","import renderGameScreen from './render-game-screen';\nimport renderCards from './render-cards';\nimport renderTimeGame from './render-time-game';\nimport renderChosenCards from './render-chosen-cards';\n\nimport '../styles/styles.scss';\n\nexport const Game = {\n    rememberLevel,\n    renderGameScreen,\n    renderChosenCards,\n    renderTimeGame,\n    renderCards,\n};\n\nconst blockButtonsDifficulty: HTMLElement | null = document.querySelector(\n    '.buttons-difficulty'\n);\nconst buttonStartGame: HTMLElement | null =\n    document.querySelector('.button-start');\n\n\n    const buttonsBlock:  NodeListOf<Element> | null = document.querySelectorAll('.buttons-difficulty button');\n\n    function changingColor (array: NodeListOf<Element>, t: HTMLElement) {\n        for (let elem of array) {\n            if (elem === t) {\n                elem.classList.add('clicked-button')\n            }\n            else {\n                elem.classList.remove('clicked-button')\n            }\n        }\n    }\n\nexport function rememberLevel() {\n    if (blockButtonsDifficulty !== null && buttonStartGame !== null) {\n        blockButtonsDifficulty.addEventListener(\n            'click',\n            function chooseLevel(event) {\n                if (!(event.target instanceof HTMLElement)) return;\n\n                localStorage.setItem('level', `${event.target.textContent}`);\n                if (event.target instanceof HTMLElement && buttonsBlock ) {\n                    changingColor(buttonsBlock, event.target)\n                }\n            }\n        );\n        buttonStartGame.addEventListener('click', renderGameScreen);\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', rememberLevel);\n"],"names":["templateEngine","block","document","createTextNode","String","Array","isArray","fragment","createDocumentFragment","forEach","element","appendChild","result","createElement","tag","content","cls","concat","classList","add","attrs","Object","keys","key","setAttribute","renderCards","level","suits","values","blockWithCards","querySelector","getRandomSuit","arr","newSuits","i","push","Math","floor","random","length","finalArr3","Set","pop","contains","innerHTML","remove","newValues","listOfCards","arr1","arr2","object","elem","el","suit","value","renderRelevantNumberCards","getRandomValue","finalArr2","sort","map","creatingCard","src","card","renderLevel","changeColor","node","textContent","firstElementChild","nextElementSibling","minutes","seconds","timer","blockFinalScreen","blockWithTimer","buttonStartAgain","backToStart","blockChooseDifficulty","renderGameScreen","localStorage","getItem","cardShirts","querySelectorAll","cardFaces","setTimeout","removeAttribute","HTMLElement","numberMinutesFormat","Number","count","setInterval","renderTimeGame","arrayClickedCards","addEventListener","showCard","event","target","cardFace","closest","removeEventListener","allCards","renderFinalScreen","icon","inscription","finalScreenHEading","style","opacity","clearInterval","wastedTime","buttonStartNewGame","renderResult2","child","lastElementChild","testClass","renderChosenCards","blockButtonsDifficulty","buttonStartGame","buttonsBlock","setItem","array","t","changingColor"],"sourceRoot":""}